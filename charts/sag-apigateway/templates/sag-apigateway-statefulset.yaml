apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "apigateway.fullname" . }}
  labels:
{{ include "apigateway.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "apigateway.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  serviceName: {{ .Release.Name }}-apigateway 
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "apigateway.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        {{- with .Values.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      - name: {{ .Values.image.registrySecret }}
      {{- if .Values.nodeName }}
      nodeName: {{ .Values.nodeName }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
{{- if .Values.podSecurityContext }}
      securityContext:
{{ toYaml .Values.podSecurityContext | indent 8 }}
{{- end }}
      containers:
      - name: apigateway
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- if .Values.apigateway.securityContext }}
        securityContext:
{{ toYaml .Values.apigateway.securityContext | indent 10 }}
{{- end }}
        env:
        {{if .Values.terracotta_host }}
        - name: "apigw_cluster_tsaUrls"
          value: {{ .Values.terracotta_host }}
        - name: apigw_terracotta_license_filename
          value: terracotta-license.key
        {{ end }}
        {{- if eq .Values.apigateway.license.useYourOwnLicense true }}
        - name: "SAG_IS_LICENSE_FILE"
          value: {{ .Values.apigateway.license.mountPath | default "/opt/licenses/licenseKey.xml" }}
        {{- end }}
        volumeMounts:
        - name: elasticsearch-config
          mountPath: {{ .Values.elasticsearch.config.path }}/elasticsearch.yml
          subPath: elasticsearch.yml
        - name: data-volume
          mountPath: {{ .Values.elasticsearch.data.path }}
        {{- if eq .Values.apigateway.logs.enabled  true }}
        - name: apigateway-logs
          mountPath: {{ .Values.apigateway.logs.path }}
        {{- end }}
        {{- if eq .Values.apigateway.license.useYourOwnLicense true }}
        - name: apigw-license
          mountPath: {{ .Values.apigateway.license.mountPath | default "/opt/licenses/licenseKey.xml" }}
          subPath: {{ .Values.apigateway.license.fileName | default "licenseKey.xml" }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.is.service.targetPort }}
          name: "{{ .Values.is.service.targetPort }}tcp"
          protocol: TCP
        - containerPort: {{ .Values.apigateway.service.targetPort }}
          name: "{{ .Values.apigateway.service.targetPort }}tcp"
          protocol: TCP 
        {{ if and (not .Values.elasticsearch_external) (not .Values.elasticsearch_sidecar) }}
        - containerPort: {{ .Values.elasticsearch_embedded.port }}
          name: "{{ .Values.elasticsearch_embedded.port }}tcp"
          protocol: TCP
        {{ end }}
        livenessProbe:
          failureThreshold: 4
          initialDelaySeconds: 90
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: {{ .Values.is.service.targetPort }}
          timeoutSeconds: 2
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /rest/apigateway/health
            port: {{ .Values.is.service.targetPort }}
            scheme: HTTP
          initialDelaySeconds: 90
          periodSeconds: 10
          successThreshold: 2
          timeoutSeconds: 2       
        {{- with .Values.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      volumes:
      {{- if eq .Values.apigateway.license.useYourOwnLicense true }}
      - name: apigw-license
        configMap:
          name: {{ .Release.Name }}-apigw-license
          items:
          - key: {{ .Values.apigateway.license.fileName | default "licenseKey.xml" }}
            path: {{ .Values.apigateway.license.fileName | default "licenseKey.xml" }}
      {{- end }}
      {{- if eq .Values.apigateway.logs.enabled  true }}
      - name: apigateway-logs
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-{{ .Values.apigateway.logs.pvcName}}
      {{- end }}
      {{- if (not .Values.elasticsearch_external)  }}
      - name: elasticsearch-config
        configMap:
          name: {{ .Release.Name }}-elasticsearch-config
          items:
          - key: elasticsearch.yml
            path: elasticsearch.yml
{{- if and (eq false .Values.elasticsearch.storage.useVolumeClaimTemplate) (eq false .Values.elasticsearch.storage.useEmptyVolume) }} # Create data volume
      - name: data-volume
        persistentVolumeClaim:
          claimName: ${.Values.elasticsearch.storage.pvcName}
{{- else if .Values.elasticsearch.storage.useEmptyVolume }}
      - name: data-volume
        emptyDir: {}
{{- else }} # Else, use volumeClaimTemplate
  volumeClaimTemplates:
    - metadata:
        name: data-volume
        labels:
          app: "{{.Release.Name}}-gateway"
          helm-release: "{{.Release.Name}}"
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ $.Values.elasticsearch.storage.storageClassName }}
        resources:
          requests:
            storage: {{.Values.elasticsearch.storage.size | default "5Gi" | quote}}  
{{- end }} # End creation of data volume
{{- end }} # End use internal elasticsearch
