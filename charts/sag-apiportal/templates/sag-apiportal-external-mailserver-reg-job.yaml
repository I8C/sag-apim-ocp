

{{- if and (and ($.Release.IsInstall) (eq .Values.isUpdate false)) (eq .Values.externalMailServer.enabled true) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{$.Release.Name}}-register-smtp-server
  labels:
    job: {{ $.Release.Name }}-register-smtp-server
    helm-release: {{ $.Release.Name }}

spec:
  # configurable number of retries with exponential back-off delay (10s, 20s, 40s, ...) with 6mins max
  backoffLimit: {{ $.Values.jobs.backoffLimit }}
  template:
    spec:
{{- if $.Values.tolerations }}
      tolerations:
{{ toYaml $.Values.tolerations | indent 8 }}
{{- end }}
      initContainers:
      - name: waitforzookeeper
        image: {{ $.Values.image.registry }}/{{ index $.Values "products" "imageBasePath" $.Values.product }}aris-admin-tools:{{ index $.Values "products" "version" $.Values.product }}
        imagePullPolicy: {{$.Values.image.pullPolicy | default "always" | quote}}
        command:
          - bash
          - -ec
          - |
{{ tpl ($.Files.Get "files/zkStatusCheck.sh") $ | indent 14 }}
      containers:
      - name: "admintools"
        image: {{ $.Values.image.registry }}/{{ index $.Values "products" "imageBasePath" $.Values.product }}aris-admin-tools:{{ index $.Values "products" "version" $.Values.product }}
        imagePullPolicy: {{.Values.image.pullPolicy | default "Always" | quote}}
        command: ["/bin/bash" ]
        securityContext:
          runAsUser: 0
        args: [ "-c", "printf 'update external service -createIfNotExists -overwrite smtp0000000000 \
              host=\"{{ .Values.externalMailServer.host }}\" \
              port=\"{{ .Values.externalMailServer.port }}\" \
              username=\"'${EMAIL_USERNAME}'\" password=\"'${EMAIL_PASSWD}'\" \
              {{ if ne .Values.externalMailServer.tlsMode "UNSET" }} use.tls=\"true\" tls.mode={{.Values.externalMailServer.tlsMode }}{{ end }} \
              sender.address=\"{{.Values.externalMailServer.senderAddress }}\" ' > /theAccCommand.tp; \
              /aris/container/retry.sh {{$.Values.jobs.internalRetry.maxRetries }} {{$.Values.jobs.internalRetry.waitTimeSec }} timeout 60 ./acc.sh -srv http://{{$.Release.Name}}-loadbalancer:{{ $.Values.loadbalancer.service.port | default 80 }} \
              -u system \
             -pwd \"${APP_PASSWD}\" \
             -f /theAccCommand.tp"]
        env:
        - name: APP_PASSWD
          valueFrom:
            secretKeyRef:
              name: {{ $.Release.Name }}-app-secrets
              key: app_passwd
        - name: EMAIL_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ $.Release.Name }}-app-secrets
              key: email_user
        - name: EMAIL_PASSWD
          valueFrom:
            secretKeyRef:
              name: {{ $.Release.Name }}-app-secrets
              key: email_passwd
      restartPolicy: OnFailure
{{- if eq $.Values.image.servicePrincipal false }}
      imagePullSecrets:
      - name: {{$.Values.image.registrySecret}}
{{- end }}
{{- end }}
